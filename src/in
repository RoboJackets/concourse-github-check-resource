#!/bin/python

from json import dumps, dump, loads
from sys import stdin, argv
from subprocess import run
from os import getenv
from datetime import datetime
from requests import post

concourse_input = loads(stdin.read())

if 'params' in concourse_input:
    if 'skip' in concourse_input['params']:
        if 'skip' is True:
            print(
                dumps(
                    {
                        'version': {
                            'uuid': concourse_input['version']['uuid']
                        },
                        'metadata': [
                            {
                                'name': 'skipped',
                                'value': True
                            }
                        ]
                    }
                )
            )
            exit(0)


# check to make sure resource_name matches argv[1]

git_rev_parse_output = run(['git', '-C', concourse_input['source']['repository'], 'rev-parse', 'HEAD'], text=True)
if git_rev_parse_output.returncode != 0:
    print(f"git returned unexpected response code {git_rev_parse_output.returncode}")
    print(git_rev_parse_output)
    exit(1)

git_remote_output = run(['git', '-C', concourse_input['source']['repository'], 'remote', '--verbose'], text=True)
if git_remote_output.returncode != 0:
    print(f"git returned unexpected response code {git_remote_output.returncode}")
    print(git_remote_output)
    exit(1)

remote = git_remote_output.stdout.strip().split("\n")[0].split("\t")[1].split("/")
name = concourse_input['source']['name']
host = remote[2]
api_base_url = 'https://' + ('api.github.com' if host is 'github.com' else host + '/api/v3')
owner = remote[3]
repo = remote[4].split(" ")[0]
head_sha = git_rev_parse_output.stdout.strip()
name = concourse_input['source']['name']
details_url = getenv('ATC_EXTERNAL_URL') + '/teams/' + getenv('BUILD_TEAM_NAME') + '/pipelines/' + getenv('BUILD_PIPELINE_NAME') + '/jobs/' + getenv('BUILD_JOB_NAME') + '/builds/' + getenv('BUILD_NAME')
started_at = datetime.now().astimezone().replace(microsecond=0).isoformat()

data = {
    'name': name,
    'head_sha': head_sha,
    'details_url': details_url,
    'status': 'in_progress',
    'started_at': started_at,
}

headers = {
    'Authorization': 'Bearer ' + concourse_input['source']['token'],
    'User-Agent': 'concourse-github-check-resource',
    'Accept': 'application/vnd.github.antiope-preview+json'
}

print(data)

response = post(f"{api_base_url}/repos/{owner}/{repo}/check-runs", data=data, headers=headers)
if response.status_code != 201:
    print(f"GitHub returned unexpected response code {response.status_code}")
    print(response)
    exit(1)

url = response.json()['url']
html_url = response.json()['html_url']

with open(argv[1] + "/state.json", "w") as state_file:
    dump(response.json(), state_file)

print(
    dumps(
        {
            'version': {
                'uuid': concourse_input['version']['uuid']
            },
            'metadata': [
                {
                    'name': 'url',
                    'value': url
                },
                {
                    'name': 'html_url',
                    'value': html_url
                }
            ]
        }
    )
)
